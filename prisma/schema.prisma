datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis()]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["postgresqlExtensions"]
}

//-------------------------------------------------------------
// ENUMS
//-------------------------------------------------------------
enum Role                 {
  USER
  ADMIN
  }

//-------------------------------------------------------------
// USERS
//-------------------------------------------------------------
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  phone         String?  @unique
  password      String   

  // Removed the single 'role' field
  roles         UserRole[] // A user can have multiple roles
  lastUsedRole  Role?      @map("last_used_role") // Tracks the last role used by the user
  refreshTokens RefreshToken[] // Relation to refresh tokens

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("users") // Mapea el nombre de la tabla a snake_case
}

//-------------------------------------------------------------
// USER ROLES (New Join Table)
//-------------------------------------------------------------
model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  role      Role

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, role]) // Ensures a user can't have the same role twice
  @@index([userId])
  @@map("user_roles")
}

//-------------------------------------------------------------
// REFRESH TOKENS
//-------------------------------------------------------------
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int    @map("user_id")

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}